import os
import random
import requests
import pandas as pd
import time
from tqdm import tqdm
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import logging

# Configurer les logs
logger = logging.getLogger(__name__)

logging.info(f"üìå G√©n√©ration d'un num√©ro unique pour √©viter les conflits de fichiers")

# G√©n√©ration d'un num√©ro unique pour √©viter les conflits de fichiers
db_unique_number = []
def generation_of_unique_number():
    unique_number = random.randint(1000, 99999)
    if unique_number in db_unique_number:
        return generation_of_unique_number()
    else:
        db_unique_number.append(unique_number)
        return unique_number

# Fonction de t√©l√©chargement du PDF
logging.info(f"# üìå Fonction de t√©l√©chargement du PDF")

def download_jurisprudence_pdf(url):
    unique_number = generation_of_unique_number()
    output_file = f"telechargements/j-{unique_number}.pdf"

    response = requests.get(url, stream=True)
    if response.status_code == 200:
        with open(output_file, "wb") as file:
            for chunk in response.iter_content(chunk_size=1024):
                file.write(chunk)
        logging.info(f"‚úÖ Fichier t√©l√©charg√© : {output_file}")
    else:
        logging.error(f"‚ùå √âchec du t√©l√©chargement. Code: {response.status_code}")

# Chargement des URLs √† partir du fichier CSV
logging.info(f"üìå Chargement des URLs √† partir du fichier CSV")

df = pd.read_csv("data/legiafrica-jurisprudence.csv")

# Diviser le DataFrame en 4 parties
logging.info(f"üìå Diviser le DataFrame en 4 parties")
df_split = [df[i::4] for i in range(4)]

# Cr√©ation du dossier de t√©l√©chargement si inexistant
logging.info(f"üìå Cr√©ation du dossier de t√©l√©chargement si inexistant")
download_dir = os.path.join(os.getcwd(), "telechargements")
os.makedirs(download_dir, exist_ok=True)

# Configuration de Selenium
logging.info(f"üìå Configuration de Selenium")
options = Options()
options.add_argument("--disable-notifications")
options.add_argument("--headless")
prefs = {
    "download.default_directory": download_dir,
    "download.prompt_for_download": False,
    "download.directory_upgrade": True,
    "safebrowsing.enabled": True
}
options.add_experimental_option("prefs", prefs)

# Ensure unique user data directory
user_data_dir = f"/tmp/user_data_{generation_of_unique_number()}"
options.add_argument(f"--user-data-dir={user_data_dir}")

# Initialisation du driver
logging.info(f"üìå T√©l√©chargement du chrome driver")
service = Service(ChromeDriverManager().install())

def process_df_part(df_part):
    driver = webdriver.Chrome(service=service, options=options)
    try:
        driver.get("https://legiafrica.com/login")
        wait = WebDriverWait(driver, 5)
        logging.info(f"üìå Ouverture du site")

        # Connexion au site
        email_input = wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="email-field"]')))
        password_input = wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="password-field"]')))
        email_input.send_keys("jurisintelligencework@gmail.com")
        password_input.send_keys("JurisIntelligence@2024")

        login_button = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="loginModal"]/div/div/div/div[1]/div[2]/form/div/button')))
        login_button.click()
        logging.info(f"Connexion avec succ√®s")

        time.sleep(1)

        paths = []

        # Traitement des documents dans la base de donn√©es
        for index, row in tqdm(df_part.iterrows()):
            url = row["DETAILS_LINK"]
            driver.get(url)
            time.sleep(2)

            try:
                # V√©rifier si le bouton de t√©l√©chargement existe
                download_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'button.legiafrica-btn.report')))
                download_button.click()
                time.sleep(2)

                # R√©cup√©rer l'URL du PDF actuel apr√®s le clic
                current_url = driver.current_url
                logging.info(f"üìÑ PDF d√©tect√© via bouton : {current_url}")
                download_jurisprudence_pdf(current_url)

            except Exception as e:
                logging.warning(f"‚ö†Ô∏è Bouton de t√©l√©chargement non trouv√© pour {url}. Tentative avec BeautifulSoup...")

                # Utilisation de BeautifulSoup pour r√©cup√©rer un lien alternatif
                page_source = driver.page_source
                soup = BeautifulSoup(page_source, 'html.parser')

                pdf_link = None
                for link in soup.find_all("a"):
                    if "T√©l√©charger" in link.text or "t√©l√©charger" in link.text:
                        pdf_link = link.get("href")
                        break  # Prendre le premier lien trouv√©

                if pdf_link:
                    logging.info(f"üìÑ Lien PDF trouv√© avec BeautifulSoup : {pdf_link}")
                    if not pdf_link.startswith("http"):
                        pdf_link = "https://legiafrica.com" + pdf_link

                    download_jurisprudence_pdf(pdf_link)
                else:
                    logging.error(f"‚ùå Aucun lien PDF trouv√© pour {url}")

        df_part["PDF_PATH"] = paths
        df_part.to_csv(f"data/split/jurisprudence_part_{df_part.index[0] // len(df) + 1}.csv", index=False)

    finally:
        driver.quit()

# Traitement s√©quentiel des parties du DataFrame
for df_part in df_split:
    process_df_part(df_part)
